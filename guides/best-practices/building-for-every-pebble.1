<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <title>Building for Every Pebble // Pebble Developers</title>
  <meta name="viewport" content="width=device-width,initial-scale=1">
  <meta name="description" content="How to write one app compatible with all Pebble smartwatches.">
  <link rel="canonical" href="http://developer.getpebble.com/guides/best-practices/building-for-every-pebble/">
  <link href="//fonts.googleapis.com/css?family=Open+Sans:400italic,400,300,600,700" rel="stylesheet" type="text/css">
  <link href="//fonts.googleapis.com/css?family=Inconsolata:400,700" rel="stylesheet" type="text/css">
  <link href="/developer.pebble.com/assets/favicon.png" rel="shortcut icon" type="image/vnd.microsoft.icon" id="favicon">
  <link rel="stylesheet" type="text/css" href="/developer.pebble.com/assets/css/main.css">

  <noscript>
  <link rel="stylesheet" type="text/css" href="/developer.pebble.com/assets/css/noscript.css">
  </noscript>

  <script type="text/javascript" >
    var _rollbarConfig = {
      accessToken: 'e1ecd52de5ba46c88e9f6f346a954c62',
      captureUncaught: true,
      payload: {
        environment: 'production'
      }
    };
    !function(a,b){function c(b){this.shimId=++h,this.notifier=null,this.parentShim=b,this.logger=function(){},a.console&&void 0===a.console.shimId&&(this.logger=a.console.log)}function d(b,c,d){a._rollbarWrappedError&&(d[4]||(d[4]=a._rollbarWrappedError),d[5]||(d[5]=a._rollbarWrappedError._rollbarContext),a._rollbarWrappedError=null),b.uncaughtError.apply(b,d),c&&c.apply(a,d)}function e(b){var d=c;return g(function(){if(this.notifier)return this.notifier[b].apply(this.notifier,arguments);var c=this,e="scope"===b;e&&(c=new d(this));var f=Array.prototype.slice.call(arguments,0),g={shim:c,method:b,args:f,ts:new Date};return a._rollbarShimQueue.push(g),e?c:void 0})}function f(a,b){if(b.hasOwnProperty&&b.hasOwnProperty("addEventListener")){var c=b.addEventListener;b.addEventListener=function(b,d,e){c.call(this,b,a.wrap(d),e)};var d=b.removeEventListener;b.removeEventListener=function(a,b,c){d.call(this,a,b&&b._wrapped?b._wrapped:b,c)}}}function g(a,b){return b=b||this.logger,function(){try{return a.apply(this,arguments)}catch(c){b("Rollbar internal error:",c)}}}var h=0;c.init=function(a,b){var e=b.globalAlias||"Rollbar";if("object"==typeof a[e])return a[e];a._rollbarShimQueue=[],a._rollbarWrappedError=null,b=b||{};var h=new c;return g(function(){if(h.configure(b),b.captureUncaught){var c=a.onerror;a.onerror=function(){var a=Array.prototype.slice.call(arguments,0);d(h,c,a)};var g,i,j="EventTarget,Window,Node,ApplicationCache,AudioTrackList,ChannelMergerNode,CryptoOperation,EventSource,FileReader,HTMLUnknownElement,IDBDatabase,IDBRequest,IDBTransaction,KeyOperation,MediaController,MessagePort,ModalWindow,Notification,SVGElementInstance,Screen,TextTrack,TextTrackCue,TextTrackList,WebSocket,WebSocketWorker,Worker,XMLHttpRequest,XMLHttpRequestEventTarget,XMLHttpRequestUpload".split(",");for(g=0;g<j.length;++g)i=j[g],a[i]&&a[i].prototype&&f(h,a[i].prototype)}return a[e]=h,h},h.logger)()},c.prototype.loadFull=function(a,b,c,d,e){var f=g(function(){var a=b.createElement("script"),e=b.getElementsByTagName("script")[0];a.src=d.rollbarJsUrl,a.async=!c,a.onload=h,e.parentNode.insertBefore(a,e)},this.logger),h=g(function(){var b;if(void 0===a._rollbarPayloadQueue){var c,d,f,g;for(b=new Error("rollbar.js did not load");c=a._rollbarShimQueue.shift();)for(f=c.args,g=0;g<f.length;++g)if(d=f[g],"function"==typeof d){d(b);break}}"function"==typeof e&&e(b)},this.logger);g(function(){c?f():a.addEventListener?a.addEventListener("load",f,!1):a.attachEvent("onload",f)},this.logger)()},c.prototype.wrap=function(b,c){try{var d;if(d="function"==typeof c?c:function(){return c||{}},"function"!=typeof b)return b;if(b._isWrap)return b;if(!b._wrapped){b._wrapped=function(){try{return b.apply(this,arguments)}catch(c){throw c._rollbarContext=d(),c._rollbarContext._wrappedSource=b.toString(),a._rollbarWrappedError=c,c}},b._wrapped._isWrap=!0;for(var e in b)b.hasOwnProperty(e)&&(b._wrapped[e]=b[e])}return b._wrapped}catch(f){return b}};for(var i="log,debug,info,warn,warning,error,critical,global,configure,scope,uncaughtError".split(","),j=0;j<i.length;++j)c.prototype[i[j]]=e(i[j]);var k="//d37gvrvc0wt4s1.cloudfront.net/js/v1.1/rollbar.min.js";_rollbarConfig.rollbarJsUrl=_rollbarConfig.rollbarJsUrl||k;var l=c.init(a,_rollbarConfig);l.loadFull(a,b,!1,_rollbarConfig)}(window,document);
  </script>
  <script type="text/javascript" async>
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
    ga('create', 'UA-30638158-4', 'auto');
    ga('send', 'pageview');
  </script>

</head>
<body class="">
  <div class="mmenu__wrapper">
    <div class="sidebar__wrapper sidebar__wrapper--sectionmenu">
  <div class="sidebar sidebar--narrow">
    <a href="/" class="sidebar__header">
      <span>pebble</span>
    </a>
    <ul class="mainmenu">
      <li class="mainmenu__item mainmenu__item--getting-started"><a href="/tutorials/"><span>Tutorials</span></a></li>
<li class="mainmenu__item mainmenu__item--sdk"><a href="/sdk/"><span>Get the SDK</span></a></li>
<li class="mainmenu__item mainmenu__item--guides active"><a href="/guides/"><span>Guides</span></a></li>
<li class="mainmenu__item mainmenu__item--docs"><a href="/docs/"><span>Documentation</span></a></li>
<li class="mainmenu__item mainmenu__item--examples"><a href="/examples/"><span>Examples</span></a></li>
<li class="mainmenu__item mainmenu__item--community"><a href="/community/"><span>Community</span></a></li>
<li class="mainmenu__item mainmenu__item--blog"><a href="/blog/"><span>Blog</span></a></li>
<li class="mainmenu__item mainmenu__item--more"><a href="/more/"><span>More</span></a></li>

    </ul>
    <div class="sidebar__legal">
      <a href="https://www.pebble.com/legal/privacy/" target="_blank">Privacy</a>
      <br>
      <a href="https://www.pebble.com/legal/cookies/" target="_blank">Cookies</a>
    </div>
    <a href="https://dev-portal.getpebble.com/" target="_blank" class="sidebar__footer">Publish</a>
  </div>
  <div class="section-menu section-menu--guides section-menu--light">
    <div class="section-menu__header">
      <h3><a href="/guides/">Guides</a></h3>
    </div>
    <ul>
      <li class="section-menu__item">
        <a href="/guides/toc/">Table of Contents</a>
      </li>




        <li class="section-menu__item">
          <a href="/guides/app-resources/">

            App Resources
          </a>

        </li>




        <li class="section-menu__item">
          <a href="/guides/appstore-publishing/">

            Appstore Publishing
          </a>

        </li>




        <li class="section-menu__item open">
          <a href="/guides/best-practices/">

            Best Practices
          </a>

            <ul>






                <li class="section-menu__subitem active">
                  <a href="/guides/best-practices/building-for-every-pebble/"><span>Building for Every Pebble</span></a>
                </li>



                <li class="section-menu__subitem">
                  <a href="/guides/best-practices/conserving-battery-life/"><span>Conserving Battery Life</span></a>
                </li>



                <li class="section-menu__subitem">
                  <a href="/guides/best-practices/modular-app-architecture/"><span>Modular App Architecture</span></a>
                </li>



            </ul>

        </li>




        <li class="section-menu__item">
          <a href="/guides/communication/">

            Communication
          </a>

        </li>




        <li class="section-menu__item">
          <a href="/guides/debugging/">

            Debugging
          </a>

        </li>




        <li class="section-menu__item">
          <a href="/guides/design-and-interaction/">

            Design and Interaction
          </a>

        </li>




        <li class="section-menu__item">
          <a href="/guides/events-and-services/">

            Events and Services
          </a>

        </li>




        <li class="section-menu__item">
          <a href="/guides/graphics-and-animations/">

            Graphics and Animations
          </a>

        </li>




        <li class="section-menu__item">
          <a href="/guides/migration/">

            Migrating Older Apps
          </a>

        </li>




        <li class="section-menu__item">
          <a href="/guides/pebble-packages/">

            Pebble Packages
          </a>

        </li>




        <li class="section-menu__item">
          <a href="/guides/pebble-timeline/">

            Pebble Timeline
          </a>

        </li>




        <li class="section-menu__item">
          <a href="/guides/rocky-js/">

            Rocky.js
          </a>

        </li>




        <li class="section-menu__item">
          <a href="/guides/smartstraps/">

            Smartstraps
          </a>

        </li>




        <li class="section-menu__item">
          <a href="/guides/tools-and-resources/">

            Tools and Resources
          </a>

        </li>




        <li class="section-menu__item">
          <a href="/guides/user-interfaces/">

            User Interfaces
          </a>

        </li>

    </ul>
  </div>
</div><!-- sidebar__wrapper -->
<div class="content content--section-menu">
  <div class="search">
  <a  href="javascript:void(0);" class="mobile-nav__hamburger js-mobile-nav-toggle"><i class="fa fa-reorder"></i></a>
  <i class="fa fa-lg fa-search search__icon"></i><input type="search" id="quicksearch" placeholder="Search Developer Site">
</div>
<div class="quicksearch" style="display: none;" id="quicksearch__results"></div>
<div id="search__blackout" style="display: none;"></div>

  <div class="container">

<div class="visible-m visible-s visible-xs row">
  <div class="col-xs-12">
    <div class="form__group">
      <div class="select-style no-label">
        <select class="js-toc-select">

            <option value="preprocessor-directives">Preprocessor Directives</option>

            <option value="available-defines-and-macros">Available Defines and Macros</option>

            <option value="api-detection">API Detection</option>

            <option value="avoid-hardcoded-layout-values">Avoid Hardcoded Layout Values</option>

            <option value="screen-sizes">Screen Sizes</option>

            <option value="pebble-c-watchinfo">Pebble C WatchInfo</option>

            <option value="pebblekit-js-watch-info">PebbleKit JS Watch Info</option>

            <option value="detecting-platform-specific-js-features">Detecting Platform-specific JS Features</option>

            <option value="platform-specific-resources">Platform-specific Resources</option>

            <option value="multiple-display-shapes">Multiple Display Shapes</option>

        </select>
      </div>
    </div>
  </div>
</div>


<div class="row">
  <div class="col-l-8 col-m-12">
    <h1 class="pagetitle">Building for Every Pebble</h1>

<!--

 -->
    <div class="markdown markdown--staff">

    <p>The difference in capabilities between the various Pebble hardware platforms are
listed in
<a href="/guides/tools-and-resources/hardware-information/"><em>Hardware Information</em></a>. For example, the
Basalt, Chalk and Emery platforms support 64 colors, whereas the Aplite and
Diorite platforms only support two colors. This can make developing apps with
rich color layouts difficult when considering compatibility with other non-color
hardware. Another example is using platform specific APIs such as Health or
Dictation.</p><p>To make life simple for users, developers should strive to write one app that
can be used on all platforms. To help make this task simpler for developers, the
Pebble SDK provides numerous methods to accommodate different hardware
capabilities in code.</p><h2 id="preprocessor-directives" class="anchor">Preprocessor Directives</h2><p>It is possible to specify certain blocks of code to be compiled for specific
purposes by using the <code>#ifdef</code> preprocessor statement. For example, the
<a href="/docs/c/Foundation/Dictation/" title="Dictation" class="link--docs"><code>Dictation</code></a> API should be excluded on platforms with no microphone:</p><div class="highlight"><pre><span class="cp">#if defined(PBL_MICROPHONE)</span>
  <span class="c1">// Start dictation UI</span>
  <span class="n">dictation_session_start</span><span class="p">(</span><span class="n">s_dictation_session</span><span class="p">);</span>
<span class="cp">#else</span>
  <span class="c1">// Microphone is not available</span>
  <span class="n">text_layer_set_text</span><span class="p">(</span><span class="n">s_some_layer</span><span class="p">,</span> <span class="s">"Dictation not available!"</span><span class="p">);</span>
<span class="cp">#endif</span>
</pre></div><p>When designing UI layouts, any use of colors on compatible platforms can be
adapted to either black or white on non-color platforms. The <code>PBL_COLOR</code> and
<code>PBL_BW</code> symbols will be defined at compile time when appropriate capabilities
are available:</p><div class="highlight"><pre><span class="cp">#if defined(PBL_COLOR)</span>
  <span class="n">text_layer_set_text_color</span><span class="p">(</span><span class="n">s_text_layer</span><span class="p">,</span> <span class="n">GColorRed</span><span class="p">);</span>
  <span class="n">text_layer_set_background_color</span><span class="p">(</span><span class="n">s_text_layer</span><span class="p">,</span> <span class="n">GColorChromeYellow</span><span class="p">);</span>
<span class="cp">#else</span>
  <span class="n">text_layer_set_text_color</span><span class="p">(</span><span class="n">s_text_layer</span><span class="p">,</span> <span class="n">GColorWhite</span><span class="p">);</span>
  <span class="n">text_layer_set_background_color</span><span class="p">(</span><span class="n">s_text_layer</span><span class="p">,</span> <span class="n">GColorBlack</span><span class="p">);</span>
<span class="cp">#endif</span>
</pre></div><p>This is useful for blocks of multiple statements that change depending on the
availability of color support. For single statements, this can also be achieved
by using the <a href="/docs/c/Graphics/Graphics_Types/#PBL_IF_COLOR_ELSE" title="PBL_IF_COLOR_ELSE" class="link--docs"><code>PBL_IF_COLOR_ELSE()</code></a> macro.</p><div class="highlight"><pre><span class="n">window_set_background_color</span><span class="p">(</span><span class="n">s_main_window</span><span class="p">,</span> <span class="n">PBL_IF_COLOR_ELSE</span><span class="p">(</span><span class="n">GColorJaegerGreen</span><span class="p">,</span> <span class="n">GColorBlack</span><span class="p">));</span>
</pre></div><p>See below for a complete list of defines and macros available.</p><h2 id="available-defines-and-macros" class="anchor">Available Defines and Macros</h2><p>The tables below show a complete summary of all the defines and associated
macros available to conditionally compile or omit feature-dependant code. The
macros are well-suited for individual value selection, whereas the defines are
better used to select an entire block of code.</p>
<table><thead>
<tr>
<th>Define</th>
<th>MACRO</th>
<th>Available</th>
</tr>
</thead><tbody>
<tr>
<td><code>PBL_BW</code></td>
<td><code>PBL_IF_BW_ELSE()</code></td>
<td>Running on hardware that supports only black and white.</td>
</tr>
<tr>
<td><code>PBL_COLOR</code></td>
<td><code>PBL_IF_COLOR_ELSE()</code></td>
<td>Running on hardware that supports 64 colors.</td>
</tr>
<tr>
<td><code>PBL_MICROPHONE</code></td>
<td><code>PBL_IF_MICROPHONE_ELSE()</code></td>
<td>Running on hardware that includes a microphone.</td>
</tr>
<tr>
<td><code>PBL_COMPASS</code></td>
<td>None</td>
<td>Running on hardware that includes a compass.</td>
</tr>
<tr>
<td><code>PBL_SMARTSTRAP</code></td>
<td><code>PBL_IF_SMARTSTRAP_ELSE()</code></td>
<td>Running on hardware that includes a smartstrap connector, but does not indicate that the connector is capable of supplying power.</td>
</tr>
<tr>
<td><code>PBL_SMARTSTRAP_POWER</code></td>
<td>None</td>
<td>Running on hardware that includes a smartstrap connector capable of supplying power.</td>
</tr>
<tr>
<td><code>PBL_HEALTH</code></td>
<td><code>PBL_IF_HEALTH_ELSE()</code></td>
<td>Running on hardware that supports Pebble Health and the <code>HealthService</code> API.</td>
</tr>
<tr>
<td><code>PBL_RECT</code></td>
<td><code>PBL_IF_RECT_ELSE()</code></td>
<td>Running on hardware with a rectangular display.</td>
</tr>
<tr>
<td><code>PBL_ROUND</code></td>
<td><code>PBL_IF_ROUND_ELSE()</code></td>
<td>Running on hardware with a round display.</td>
</tr>
<tr>
<td><code>PBL_DISPLAY_WIDTH</code></td>
<td>None</td>
<td>Determine the screen width in pixels.</td>
</tr>
<tr>
<td><code>PBL_DISPLAY_HEIGHT</code></td>
<td>None</td>
<td>Determine the screen height in pixels.</td>
</tr>
<tr>
<td><code>PBL_PLATFORM_APLITE</code></td>
<td>None</td>
<td>Built for Pebble/Pebble Steel.</td>
</tr>
<tr>
<td><code>PBL_PLATFORM_BASALT</code></td>
<td>None</td>
<td>Built for Pebble Time/Pebble Time Steel.</td>
</tr>
<tr>
<td><code>PBL_PLATFORM_CHALK</code></td>
<td>None</td>
<td>Built for Pebble Time Round.</td>
</tr>
<tr>
<td><code>PBL_PLATFORM_DIORITE</code></td>
<td>None</td>
<td>Built for Pebble 2.</td>
</tr>
<tr>
<td><code>PBL_PLATFORM_EMERY</code></td>
<td>None</td>
<td>Built for Pebble Time 2.</td>
</tr>
<tr>
<td><code>PBL_SDK_2</code></td>
<td>None</td>
<td>Compiling with SDK 2.x (deprecated).</td>
</tr>
<tr>
<td><code>PBL_SDK_3</code></td>
<td>None</td>
<td>Compiling with SDK 3.x. or 4.x.</td>
</tr>
</tbody></table>

<blockquote>
<p>Note: It is strongly recommended to conditionally compile code using
applicable feature defines instead of <code>PBL_PLATFORM</code> defines to be as specific
as possible.</p></blockquote>
<h2 id="api-detection" class="anchor">API Detection</h2><p>In addition to platform and capabilities detection, we now provide API
detection to detect if a specific API method is available. This approach could
be considered future-proof, since platforms and capabilities may come and go.
Let&#39;s take a look at a simple example:</p><div class="highlight"><pre><span class="cp">#if PBL_API_EXISTS(health_service_peek_current_value)</span>
 <span class="c1">// Do something if specific Health API exists</span>
<span class="cp">#endif</span>
</pre></div><h2 id="avoid-hardcoded-layout-values" class="anchor">Avoid Hardcoded Layout Values</h2><p>With the multiple display shapes and resolutions available, developers should
try and avoid hardcoding layout values. Consider the example
below:</p><div class="highlight"><pre><span class="k">static</span> <span class="kt">void</span> <span class="nf">window_load</span><span class="p">(</span><span class="n">Window</span> <span class="o">*</span><span class="n">window</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// Create a full-screen Layer - BAD</span>
  <span class="n">s_some_layer</span> <span class="o">=</span> <span class="n">layer_create</span><span class="p">(</span><span class="n">GRect</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">144</span><span class="p">,</span> <span class="mi">168</span><span class="p">));</span>
<span class="p">}</span>
</pre></div><p>The hardcoded width and height of this layer will cover the entire screen on
Aplite, Basalt and Diorite, but not on Chalk or Emery. This kind of screen
size-dependant calculation should use the <a href="/docs/c/User_Interface/UnobstructedArea/" title="UnobstructedArea" class="link--docs"><code>UnobstructedArea</code></a> bounds of the
<a href="/docs/c/User_Interface/Window/" title="Window" class="link--docs"><code>Window</code></a> itself:</p><div class="highlight"><pre><span class="k">static</span> <span class="kt">void</span> <span class="nf">window_load</span><span class="p">(</span><span class="n">Window</span> <span class="o">*</span><span class="n">window</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// Get the unobstructed bounds of the Window</span>
  <span class="n">Layer</span> <span class="n">window_layer</span> <span class="o">=</span> <span class="n">window_get_root_layer</span><span class="p">(</span><span class="n">window</span><span class="p">);</span>
  <span class="n">GRect</span> <span class="n">window_bounds</span> <span class="o">=</span> <span class="n">layer_get_unobstructed_bounds</span><span class="p">(</span><span class="n">window_layer</span><span class="p">);</span>

  <span class="c1">// Properly create a full-screen Layer - GOOD</span>
  <span class="n">s_some_layer</span> <span class="o">=</span> <span class="n">layer_create</span><span class="p">(</span><span class="n">window_bounds</span><span class="p">);</span>
<span class="p">}</span>
</pre></div><p>Another common use of this sort of construction is to make a <a href="/docs/c/User_Interface/Layers/#Layer" title="Layer" class="link--docs"><code>Layer</code></a> that is
half the unobstructed screen height. This can also be correctly achieved using
the <a href="/docs/c/User_Interface/Window/" title="Window" class="link--docs"><code>Window</code></a> unobstructed bounds:</p><div class="highlight"><pre><span class="n">GRect</span> <span class="n">layer_bounds</span> <span class="o">=</span> <span class="n">window_bounds</span><span class="p">;</span>
<span class="n">layer_bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">h</span> <span class="o">/=</span> <span class="mi">2</span><span class="p">;</span>

<span class="c1">// Create a Layer that is half the screen height</span>
<span class="n">s_some_layer</span> <span class="o">=</span> <span class="n">layer_create</span><span class="p">(</span><span class="n">layer_bounds</span><span class="p">);</span>
</pre></div><p>This approach is also advantageous in simplifying updating an app for a future
new screen size, as proportional layout values will adapt as appropriate when
the <a href="/docs/c/User_Interface/Window/" title="Window" class="link--docs"><code>Window</code></a> unobstructed bounds change.</p><h2 id="screen-sizes" class="anchor">Screen Sizes</h2><p>To ease the introduction of the Emery platform, the Pebble SDK introduced new
compiler directives to allow developers to determine the screen width and
height. This is preferable to using platform detection, since multiple platforms
share the same screen width and height.</p><div class="highlight"><pre><span class="cp">#if PBL_DISPLAY_HEIGHT == 228</span>
  <span class="kt">uint8_t</span> <span class="n">offset_y</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
<span class="cp">#elif PBL_DISPLAY_HEIGHT == 180</span>
  <span class="kt">uint8_t</span> <span class="n">offset_y</span> <span class="o">=</span> <span class="mi">80</span><span class="p">;</span>
<span class="cp">#else</span>
  <span class="kt">uint8_t</span> <span class="n">offset_y</span> <span class="o">=</span> <span class="mi">60</span><span class="p">;</span>
<span class="cp">#endif</span>
</pre></div>
<blockquote>
<p>Note: Although this method is preferable to platform detection, it is better
to dynamically calculate the display width and height based on the unobstructed
bounds of the root layer.</p></blockquote>
<h2 id="pebble-c-watchinfo" class="anchor">Pebble C WatchInfo</h2><p>The <a href="/docs/c/Foundation/WatchInfo/" title="WatchInfo" class="link--docs"><code>WatchInfo</code></a> API can be used to determine exactly which Pebble model and
color an app is running on. Apps can use this information to dynamically
modify their layout or behavior depending on which Pebble the user is wearing.</p><p>For example, the display on Pebble Steel is located at a different vertical
position relative to the buttons than on Pebble Time. Any on-screen button hints
can be adjusted to compensate for this using <a href="/docs/c/Foundation/WatchInfo/#WatchInfoModel" title="WatchInfoModel" class="link--docs"><code>WatchInfoModel</code></a>.</p><div class="highlight"><pre><span class="k">static</span> <span class="kt">void</span> <span class="nf">window_load</span><span class="p">(</span><span class="n">Window</span> <span class="o">*</span><span class="n">window</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">Layer</span> <span class="n">window_layer</span> <span class="o">=</span> <span class="n">window_get_root_layer</span><span class="p">(</span><span class="n">window</span><span class="p">);</span>
  <span class="n">GRect</span> <span class="n">window_bounds</span> <span class="o">=</span> <span class="n">layer_get_bounds</span><span class="p">(</span><span class="n">window_layer</span><span class="p">);</span>

  <span class="kt">int</span> <span class="n">button_height</span><span class="p">,</span> <span class="n">y_offset</span><span class="p">;</span>

  <span class="c1">// Conditionally set layout parameters</span>
  <span class="k">switch</span><span class="p">(</span><span class="n">watch_info_get_model</span><span class="p">())</span> <span class="p">{</span>
    <span class="k">case</span> <span class="nl">WATCH_INFO_MODEL_PEBBLE_STEEL</span><span class="p">:</span>
      <span class="n">y_offset</span> <span class="o">=</span> <span class="mi">64</span><span class="p">;</span>
      <span class="n">button_height</span> <span class="o">=</span> <span class="mi">44</span><span class="p">;</span>
      <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="nl">WATCH_INFO_MODEL_PEBBLE_TIME</span><span class="p">:</span>
      <span class="n">y_offset</span> <span class="o">=</span> <span class="mi">58</span><span class="p">;</span>
      <span class="n">button_height</span> <span class="o">=</span> <span class="mi">56</span><span class="p">;</span>
      <span class="k">break</span><span class="p">;</span>

    <span class="cm">/* Other cases */</span>

    <span class="k">default</span><span class="o">:</span>
      <span class="n">y_offset</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
      <span class="n">button_height</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
      <span class="k">break</span><span class="p">;</span>

  <span class="p">}</span>

  <span class="c1">// Set the Layer frame</span>
  <span class="n">GRect</span> <span class="n">layer_frame</span> <span class="o">=</span> <span class="n">GRect</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">y_offset</span><span class="p">,</span> <span class="n">window_bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">w</span><span class="p">,</span> <span class="n">button_height</span><span class="p">);</span>

  <span class="c1">// Create the Layer</span>
  <span class="n">s_label_layer</span> <span class="o">=</span> <span class="n">text_layer_create</span><span class="p">(</span><span class="n">layer_frame</span><span class="p">);</span>
  <span class="n">layer_add_child</span><span class="p">(</span><span class="n">window_layer</span><span class="p">,</span> <span class="n">text_layer_get_layer</span><span class="p">(</span><span class="n">s_label_layer</span><span class="p">));</span>

  <span class="cm">/* Other UI code */</span>

<span class="p">}</span>
</pre></div><p>Developers can also use <a href="/docs/c/Foundation/WatchInfo/#WatchInfoColor" title="WatchInfoColor" class="link--docs"><code>WatchInfoColor</code></a> values to theme an app for each
available color of Pebble.</p><div class="highlight"><pre><span class="k">static</span> <span class="kt">void</span> <span class="nf">window_load</span><span class="p">(</span><span class="n">Window</span> <span class="o">*</span><span class="n">window</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">GColor</span> <span class="n">text_color</span><span class="p">,</span> <span class="n">background_color</span><span class="p">;</span>

  <span class="c1">// Choose different theme colors per watch color</span>
  <span class="k">switch</span><span class="p">(</span><span class="n">watch_info_get_color</span><span class="p">())</span> <span class="p">{</span>
    <span class="k">case</span> <span class="nl">WATCH_INFO_COLOR_RED</span><span class="p">:</span>
      <span class="c1">// Red theme</span>
      <span class="n">text_color</span> <span class="o">=</span> <span class="n">GColorWhite</span><span class="p">;</span>
      <span class="n">background_color</span> <span class="o">=</span> <span class="n">GColorRed</span><span class="p">;</span>
      <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="nl">WATCH_INFO_COLOR_BLUE</span><span class="p">:</span>
      <span class="c1">// Blue theme</span>
      <span class="n">text_color</span> <span class="o">=</span> <span class="n">GColorBlack</span><span class="p">;</span>
      <span class="n">background_color</span> <span class="o">=</span> <span class="n">GColorVeryLightBlue</span><span class="p">;</span>
      <span class="k">break</span><span class="p">;</span>

    <span class="cm">/* Other cases */</span>

    <span class="k">default</span><span class="o">:</span>
      <span class="n">text_color</span> <span class="o">=</span> <span class="n">GColorBlack</span><span class="p">;</span>
      <span class="n">background_color</span> <span class="o">=</span> <span class="n">GColorWhite</span><span class="p">;</span>
      <span class="k">break</span><span class="p">;</span>

  <span class="p">}</span>

  <span class="c1">// Use the conditionally set value</span>
  <span class="n">text_layer_set_text_color</span><span class="p">(</span><span class="n">s_label_layer</span><span class="p">,</span> <span class="n">text_color</span><span class="p">);</span>
  <span class="n">text_layer_set_background_color</span><span class="p">(</span><span class="n">s_label_layer</span><span class="p">,</span> <span class="n">background_color</span><span class="p">);</span>

  <span class="cm">/* Other UI code */</span>

<span class="p">}</span>
</pre></div><h2 id="pebblekit-js-watch-info" class="anchor">PebbleKit JS Watch Info</h2><p>Similar to <a href="#pebble-c-watchinfo" title="" class=""><em>Pebble C WatchInfo</em></a> above, the PebbleKit JS
<code>Pebble.getActiveWatchInfo()</code> method allows developers to determine
which model and color of Pebble the user is wearing, as well as the firmware
version running on it. For example, to obtain the model of the watch:</p>
<blockquote>
<p>Note: See the section below to avoid problem using this function on older app
version.</p></blockquote>
<div class="highlight"><pre><span class="c1">// Get the watch info</span>
<span class="kd">var</span> <span class="nx">info</span> <span class="o">=</span> <span class="nx">Pebble</span><span class="p">.</span><span class="nx">getActiveWatchInfo</span><span class="p">();</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'Pebble model: '</span> <span class="o">+</span> <span class="nx">info</span><span class="p">.</span><span class="nx">model</span><span class="p">);</span>
</pre></div><h2 id="detecting-platform-specific-js-features" class="anchor">Detecting Platform-specific JS Features</h2><p>A number of features in PebbleKit JS (such as <code>Pebble.timelineSubscribe()</code> and
<code>Pebble.getActiveWatchInfo()</code>) exist on SDK 3.x. If an app tries to use any of
these on an older Pebble mobile app version where they are not available, the JS
app will crash.</p><p>To prevent this, be sure to check for the availability of the function before
calling it. For example, in the case of <code>Pebble.getActiveWatchInfo()</code>:</p><div class="highlight"><pre><span class="k">if</span> <span class="p">(</span><span class="nx">Pebble</span><span class="p">.</span><span class="nx">getActiveWatchInfo</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// Available.</span>
  <span class="kd">var</span> <span class="nx">info</span> <span class="o">=</span> <span class="nx">Pebble</span><span class="p">.</span><span class="nx">getActiveWatchInfo</span><span class="p">();</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'Pebble model: '</span> <span class="o">+</span> <span class="nx">info</span><span class="p">.</span><span class="nx">model</span><span class="p">);</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
  <span class="c1">// Gracefully handle no info available</span>

<span class="p">}</span>
</pre></div><h2 id="platform-specific-resources" class="anchor">Platform-specific Resources</h2><p>With the availability of color support on Basalt, Chalk and Emery, developers
may wish to include color versions of resources that had previously been
pre-processed for Pebble&#39;s black and white display. Including both versions of
the resource is expensive from a resource storage perspective, and lays the
burden of packing redundant color resources in an Aplite or Diorite app when
built for multiple platforms.</p><p>To solve this problem, the Pebble SDK allows developers to specify which version
of an image resource is to be used for each display type, using <code>~bw</code> or
<code>~color</code> appended to a file name. Resources can also be bundled only with
specific platforms using the <code>targetPlatforms</code> property for each resource.</p><p>For more details about packaging resources specific to each platform, as well as
more tags available similar to <code>~color</code>, read
<a href="/guides/app-resources/platform-specific/"><em>Platform-specific Resources</em></a>.</p><h2 id="multiple-display-shapes" class="anchor">Multiple Display Shapes</h2><p>With the introduction of the Chalk platform, a new round display type is
available with increased pixel resolution. To distinguish between the two
possible shapes of display, developers can use defines to conditionally
include code segments:</p><div class="highlight"><pre><span class="cp">#if defined(PBL_RECT)</span>
  <span class="n">printf</span><span class="p">(</span><span class="s">"This is a rectangular display!"</span><span class="p">);</span>
<span class="cp">#elif defined(PBL_ROUND)</span>
  <span class="n">printf</span><span class="p">(</span><span class="s">"This is a round display!"</span><span class="p">);</span>
<span class="cp">#endif</span>
</pre></div><p>Another approach to this conditional compilation is to use the
<a href="/docs/c/Graphics/Graphics_Types/#PBL_IF_RECT_ELSE" title="PBL_IF_RECT_ELSE" class="link--docs"><code>PBL_IF_RECT_ELSE()</code></a> and <a href="/docs/c/Graphics/Graphics_Types/#PBL_IF_ROUND_ELSE" title="PBL_IF_ROUND_ELSE" class="link--docs"><code>PBL_IF_ROUND_ELSE()</code></a> macros, allowing values to be
inserted into expressions that might otherwise require a set of <code>#define</code>
statements similar to the previous example. This would result in needless
verbosity of four extra lines of code when only one is actually needed. These
are used in the following manner:</p><div class="highlight"><pre><span class="c1">// Conditionally print out the shape of the display</span>
<span class="n">printf</span><span class="p">(</span><span class="s">"This is a %s display!"</span><span class="p">,</span> <span class="n">PBL_IF_RECT_ELSE</span><span class="p">(</span><span class="s">"rectangular"</span><span class="p">,</span> <span class="s">"round"</span><span class="p">));</span>
</pre></div><p>This mechanism is best used with window bounds-derived layout size and position
value. See the <a href="#avoid-hardcoded-layout-values" title="" class=""><em>Avoid Hardcoded Layout Values</em></a>
section above for more information. Making good use of the builtin <a href="/docs/c/User_Interface/Layers/#Layer" title="Layer" class="link--docs"><code>Layer</code></a>
types will also help safeguard apps against display shape and size changes.</p><p>Another thing to consider is rendering text on a round display. Due to the
rounded corners, each horizontal line of text will have a different available
width, depending on its vertical position.</p>
    </div>

    <a id="comments" class="anchor"></a>
    <div id="disqus_thread" aria-live="polite" data-post-url="https://developer.getpebble.com/guides/best-practices/building-for-every-pebble/">
      You need JavaScript enabled to read and post comments.
    </div>


  </div>

    <div class="col-m-4 hidden-s hidden-xs hidden-m">
      <div class="gray-box gray-box--fixed gray-box--scrollspy">

  <h3>Overview</h3>
  <ul class="toc">

      <li class="toc__item toc__item--level1"><a href="#preprocessor-directives">Preprocessor Directives</a></li>

      <li class="toc__item toc__item--level1"><a href="#available-defines-and-macros">Available Defines and Macros</a></li>

      <li class="toc__item toc__item--level1"><a href="#api-detection">API Detection</a></li>

      <li class="toc__item toc__item--level1"><a href="#avoid-hardcoded-layout-values">Avoid Hardcoded Layout Values</a></li>

      <li class="toc__item toc__item--level1"><a href="#screen-sizes">Screen Sizes</a></li>

      <li class="toc__item toc__item--level1"><a href="#pebble-c-watchinfo">Pebble C WatchInfo</a></li>

      <li class="toc__item toc__item--level1"><a href="#pebblekit-js-watch-info">PebbleKit JS Watch Info</a></li>

      <li class="toc__item toc__item--level1"><a href="#detecting-platform-specific-js-features">Detecting Platform-specific JS Features</a></li>

      <li class="toc__item toc__item--level1"><a href="#platform-specific-resources">Platform-specific Resources</a></li>

      <li class="toc__item toc__item--level1"><a href="#multiple-display-shapes">Multiple Display Shapes</a></li>

  </ul>



      </div>
    </div>

</div>

  </div>
</div>


  </div>
  <script type="text/javascript">
    var searchPrimary = '';
  </script>

  <script type="text/javascript" src="/developer.pebble.com/assets/js/libs-ce98da7b5eecc97f976a3cad8e665a31.js"></script>

  <script type="text/javascript" src="/developer.pebble.com/assets/js/templates.js"></script>
  <script type="text/javascript" src="/developer.pebble.com/assets/js/app.js"></script>
  <script type="text/javascript" src="/developer.pebble.com/assets/js/search.js"></script>
  <script type="text/javascript" src="/developer.pebble.com/assets/js/quicksearch.js"></script>
  <script type="text/javascript" src="/developer.pebble.com/assets/js/disqus.js"></script>

</body>
</html>
