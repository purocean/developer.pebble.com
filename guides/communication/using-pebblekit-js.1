<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <title>PebbleKit JS // Pebble Developers</title>
  <meta name="viewport" content="width=device-width,initial-scale=1">
  <meta name="description" content="How to use PebbleKit JS to communicate with the connected phone's JS
environment.
">
  <link rel="canonical" href="http://developer.getpebble.com/guides/communication/using-pebblekit-js/">
  <link href="//fonts.googleapis.com/css?family=Open+Sans:400italic,400,300,600,700" rel="stylesheet" type="text/css">
  <link href="//fonts.googleapis.com/css?family=Inconsolata:400,700" rel="stylesheet" type="text/css">
  <link href="/assets/favicon.png" rel="shortcut icon" type="image/vnd.microsoft.icon" id="favicon">
  <link rel="stylesheet" type="text/css" href="/assets/css/main.css">
  
  <noscript>
  <link rel="stylesheet" type="text/css" href="/assets/css/noscript.css">
  </noscript>
  
  <script type="text/javascript" >
    var _rollbarConfig = {
      accessToken: 'e1ecd52de5ba46c88e9f6f346a954c62',
      captureUncaught: true,
      payload: {
        environment: 'production'
      }
    };
    !function(a,b){function c(b){this.shimId=++h,this.notifier=null,this.parentShim=b,this.logger=function(){},a.console&&void 0===a.console.shimId&&(this.logger=a.console.log)}function d(b,c,d){a._rollbarWrappedError&&(d[4]||(d[4]=a._rollbarWrappedError),d[5]||(d[5]=a._rollbarWrappedError._rollbarContext),a._rollbarWrappedError=null),b.uncaughtError.apply(b,d),c&&c.apply(a,d)}function e(b){var d=c;return g(function(){if(this.notifier)return this.notifier[b].apply(this.notifier,arguments);var c=this,e="scope"===b;e&&(c=new d(this));var f=Array.prototype.slice.call(arguments,0),g={shim:c,method:b,args:f,ts:new Date};return a._rollbarShimQueue.push(g),e?c:void 0})}function f(a,b){if(b.hasOwnProperty&&b.hasOwnProperty("addEventListener")){var c=b.addEventListener;b.addEventListener=function(b,d,e){c.call(this,b,a.wrap(d),e)};var d=b.removeEventListener;b.removeEventListener=function(a,b,c){d.call(this,a,b&&b._wrapped?b._wrapped:b,c)}}}function g(a,b){return b=b||this.logger,function(){try{return a.apply(this,arguments)}catch(c){b("Rollbar internal error:",c)}}}var h=0;c.init=function(a,b){var e=b.globalAlias||"Rollbar";if("object"==typeof a[e])return a[e];a._rollbarShimQueue=[],a._rollbarWrappedError=null,b=b||{};var h=new c;return g(function(){if(h.configure(b),b.captureUncaught){var c=a.onerror;a.onerror=function(){var a=Array.prototype.slice.call(arguments,0);d(h,c,a)};var g,i,j="EventTarget,Window,Node,ApplicationCache,AudioTrackList,ChannelMergerNode,CryptoOperation,EventSource,FileReader,HTMLUnknownElement,IDBDatabase,IDBRequest,IDBTransaction,KeyOperation,MediaController,MessagePort,ModalWindow,Notification,SVGElementInstance,Screen,TextTrack,TextTrackCue,TextTrackList,WebSocket,WebSocketWorker,Worker,XMLHttpRequest,XMLHttpRequestEventTarget,XMLHttpRequestUpload".split(",");for(g=0;g<j.length;++g)i=j[g],a[i]&&a[i].prototype&&f(h,a[i].prototype)}return a[e]=h,h},h.logger)()},c.prototype.loadFull=function(a,b,c,d,e){var f=g(function(){var a=b.createElement("script"),e=b.getElementsByTagName("script")[0];a.src=d.rollbarJsUrl,a.async=!c,a.onload=h,e.parentNode.insertBefore(a,e)},this.logger),h=g(function(){var b;if(void 0===a._rollbarPayloadQueue){var c,d,f,g;for(b=new Error("rollbar.js did not load");c=a._rollbarShimQueue.shift();)for(f=c.args,g=0;g<f.length;++g)if(d=f[g],"function"==typeof d){d(b);break}}"function"==typeof e&&e(b)},this.logger);g(function(){c?f():a.addEventListener?a.addEventListener("load",f,!1):a.attachEvent("onload",f)},this.logger)()},c.prototype.wrap=function(b,c){try{var d;if(d="function"==typeof c?c:function(){return c||{}},"function"!=typeof b)return b;if(b._isWrap)return b;if(!b._wrapped){b._wrapped=function(){try{return b.apply(this,arguments)}catch(c){throw c._rollbarContext=d(),c._rollbarContext._wrappedSource=b.toString(),a._rollbarWrappedError=c,c}},b._wrapped._isWrap=!0;for(var e in b)b.hasOwnProperty(e)&&(b._wrapped[e]=b[e])}return b._wrapped}catch(f){return b}};for(var i="log,debug,info,warn,warning,error,critical,global,configure,scope,uncaughtError".split(","),j=0;j<i.length;++j)c.prototype[i[j]]=e(i[j]);var k="//d37gvrvc0wt4s1.cloudfront.net/js/v1.1/rollbar.min.js";_rollbarConfig.rollbarJsUrl=_rollbarConfig.rollbarJsUrl||k;var l=c.init(a,_rollbarConfig);l.loadFull(a,b,!1,_rollbarConfig)}(window,document);
  </script>
  <script type="text/javascript" async>
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
    ga('create', 'UA-30638158-4', 'auto');
    ga('send', 'pageview');
  </script>
  
</head>
<body class="">
  <div class="mmenu__wrapper">
    <div class="sidebar__wrapper sidebar__wrapper--sectionmenu">
  <div class="sidebar sidebar--narrow">
    <a href="/" class="sidebar__header">
      <span>pebble</span>
    </a>
    <ul class="mainmenu">
      <li class="mainmenu__item mainmenu__item--getting-started"><a href="/tutorials/"><span>Tutorials</span></a></li>
<li class="mainmenu__item mainmenu__item--sdk"><a href="/sdk/"><span>Get the SDK</span></a></li>
<li class="mainmenu__item mainmenu__item--guides active"><a href="/guides/"><span>Guides</span></a></li>
<li class="mainmenu__item mainmenu__item--docs"><a href="/docs/"><span>Documentation</span></a></li>
<li class="mainmenu__item mainmenu__item--examples"><a href="/examples/"><span>Examples</span></a></li>
<li class="mainmenu__item mainmenu__item--community"><a href="/community/"><span>Community</span></a></li>
<li class="mainmenu__item mainmenu__item--blog"><a href="/blog/"><span>Blog</span></a></li>
<li class="mainmenu__item mainmenu__item--more"><a href="/more/"><span>More</span></a></li>

    </ul>
    <div class="sidebar__legal">
      <a href="https://www.pebble.com/legal/privacy/" target="_blank">Privacy</a>
      <br>
      <a href="https://www.pebble.com/legal/cookies/" target="_blank">Cookies</a>
    </div>
    <a href="https://dev-portal.getpebble.com/" target="_blank" class="sidebar__footer">Publish</a>
  </div>
  <div class="section-menu section-menu--guides section-menu--light">
    <div class="section-menu__header">
      <h3><a href="/guides/">Guides</a></h3>
    </div>
    <ul>
      <li class="section-menu__item">
        <a href="/guides/toc/">Table of Contents</a>
      </li>
      
        
        
        
        <li class="section-menu__item">
          <a href="/guides/app-resources/">
            
            App Resources
          </a>
          
        </li>
      
        
        
        
        <li class="section-menu__item">
          <a href="/guides/appstore-publishing/">
            
            Appstore Publishing
          </a>
          
        </li>
      
        
        
        
        <li class="section-menu__item">
          <a href="/guides/best-practices/">
            
            Best Practices
          </a>
          
        </li>
      
        
        
        
        <li class="section-menu__item open">
          <a href="/guides/communication/">
            
            Communication
          </a>
          
            <ul>
            
            
            
              
                <li class="section-menu__subitem">
                  <a href="/guides/communication/advanced-communication/"><span>Advanced Communication</span></a>
                </li>
              
            
              
            
              
                <li class="section-menu__subitem">
                  <a href="/guides/communication/datalogging/"><span>Datalogging</span></a>
                </li>
              
            
              
                <li class="section-menu__subitem">
                  <a href="/guides/communication/using-pebblekit-android/"><span>PebbleKit Android</span></a>
                </li>
              
            
              
                <li class="section-menu__subitem active">
                  <a href="/guides/communication/using-pebblekit-js/"><span>PebbleKit JS</span></a>
                </li>
              
            
              
                <li class="section-menu__subitem">
                  <a href="/guides/communication/using-pebblekit-ios/"><span>PebbleKit iOS</span></a>
                </li>
              
            
              
                <li class="section-menu__subitem">
                  <a href="/guides/communication/sending-and-receiving-data/"><span>Sending and Receiving Data</span></a>
                </li>
              
            
              
                <li class="section-menu__subitem">
                  <a href="/guides/communication/using-the-sports-api/"><span>Sports API</span></a>
                </li>
              
            
            
            </ul>
          
        </li>
      
        
        
        
        <li class="section-menu__item">
          <a href="/guides/debugging/">
            
            Debugging
          </a>
          
        </li>
      
        
        
        
        <li class="section-menu__item">
          <a href="/guides/design-and-interaction/">
            
            Design and Interaction
          </a>
          
        </li>
      
        
        
        
        <li class="section-menu__item">
          <a href="/guides/events-and-services/">
            
            Events and Services
          </a>
          
        </li>
      
        
        
        
        <li class="section-menu__item">
          <a href="/guides/graphics-and-animations/">
            
            Graphics and Animations
          </a>
          
        </li>
      
        
        
        
        <li class="section-menu__item">
          <a href="/guides/migration/">
            
            Migrating Older Apps
          </a>
          
        </li>
      
        
        
        
        <li class="section-menu__item">
          <a href="/guides/pebble-packages/">
            
            Pebble Packages
          </a>
          
        </li>
      
        
        
        
        <li class="section-menu__item">
          <a href="/guides/pebble-timeline/">
            
            Pebble Timeline
          </a>
          
        </li>
      
        
        
        
        <li class="section-menu__item">
          <a href="/guides/rocky-js/">
            
            Rocky.js
          </a>
          
        </li>
      
        
        
        
        <li class="section-menu__item">
          <a href="/guides/smartstraps/">
            
            Smartstraps
          </a>
          
        </li>
      
        
        
        
        <li class="section-menu__item">
          <a href="/guides/tools-and-resources/">
            
            Tools and Resources
          </a>
          
        </li>
      
        
        
        
        <li class="section-menu__item">
          <a href="/guides/user-interfaces/">
            
            User Interfaces
          </a>
          
        </li>
      
    </ul>
  </div>
</div><!-- sidebar__wrapper -->
<div class="content content--section-menu">
  <div class="search">
  <a  href="javascript:void(0);" class="mobile-nav__hamburger js-mobile-nav-toggle"><i class="fa fa-reorder"></i></a>
  <i class="fa fa-lg fa-search search__icon"></i><input type="search" id="quicksearch" placeholder="Search Developer Site">
</div>
<div class="quicksearch" style="display: none;" id="quicksearch__results"></div>
<div id="search__blackout" style="display: none;"></div>

  <div class="container">
    
<div class="visible-m visible-s visible-xs row">
  <div class="col-xs-12">
    <div class="form__group">
      <div class="select-style no-label">
        <select class="js-toc-select">
          
            <option value="setting-up">Setting Up</option>
          
            <option value="defining-keys">Defining Keys</option>
          
            <option value="sending-messages-from-js">Sending Messages from JS</option>
          
            <option value="type-conversion">- Type Conversion</option>
          
            <option value="receiving-messages-in-js">Receiving Messages in JS</option>
          
            <option value="using-localstorage">Using LocalStorage</option>
          
            <option value="using-xmlhttprequest">Using XMLHttpRequest</option>
          
            <option value="using-geolocation">Using Geolocation</option>
          
            <option value="account-token">Account Token</option>
          
            <option value="watch-token">Watch Token</option>
          
            <option value="showing-a-notification">Showing a Notification</option>
          
            <option value="getting-watch-information">Getting Watch Information</option>
          
        </select>
      </div>
    </div>
  </div>
</div>


<div class="row">
  <div class="col-l-8 col-m-12">
    <h1 class="pagetitle">PebbleKit JS</h1>
    
<!-- 
    
    <div class="alert alert--bg-lightblue platform-choice platform-choice--large platform-choice--hidden">
  <p>
    This page contains some instructions that are different if you're using
    CloudPebble or if you're using the SDK locally on your computer.
  </p>
  <p>
    Select whether you're using CloudPebble or the SDK below to show the
    relevant instructions!
  </p>
  <div class="text-center">
    <a href="javascript:void();" class="platform-choice--link js-platform-choice" data-sdk-platform="cloudpebble">
      <img src="/assets/images/sdk/cloud.svg">
      <h4>CloudPebble</h4>
    </a>
    <a href="javascript:void();" class="platform-choice--link js-platform-choice" data-sdk-platform="local">
      <img src="/assets/images/sdk/sdk-box.svg">
      <h4>SDK</h4>
    </a>
  </div>
</div>
<div class="alert alert--bg-lightblue platform-choice platform-choice--small platform-choice--hidden">
  <p class="platform-specific" data-sdk-platform="cloudpebble">
    <img src="/assets/images/sdk/cloud.svg">
    Showing instructions for CloudPebble. <a href="javascript: void();" class="js-platform-choice" data-sdk-platform="local">Not using CloudPebble?</a>
  </p>
  <p class="platform-specific" data-sdk-platform="local">
    <img src="/assets/images/sdk/sdk-box.svg">
    Showing instructions for the SDK. <a href="javascript: void();" class="js-platform-choice" data-sdk-platform="cloudpebble">Using CloudPebble?</a>
  </p>
</div>

    
 -->
    <div class="markdown markdown--staff">
    
    <div class="alert alert--bg-lightblue platform-choice platform-choice--large platform-choice--hidden">
  <p>
    This page contains some instructions that are different if you're using
    CloudPebble or if you're using the SDK locally on your computer.
  </p>
  <p>
    Select whether you're using CloudPebble or the SDK below to show the
    relevant instructions!
  </p>
  <div class="text-center">
    <a href="javascript:void();" class="platform-choice--link js-platform-choice" data-sdk-platform="cloudpebble">
      <img src="/assets/images/sdk/cloud.svg">
      <h4>CloudPebble</h4>
    </a>
    <a href="javascript:void();" class="platform-choice--link js-platform-choice" data-sdk-platform="local">
      <img src="/assets/images/sdk/sdk-box.svg">
      <h4>SDK</h4>
    </a>
  </div>
</div>
<div class="alert alert--bg-lightblue platform-choice platform-choice--small platform-choice--hidden">
  <p class="platform-specific" data-sdk-platform="cloudpebble">
    <img src="/assets/images/sdk/cloud.svg">
    Showing instructions for CloudPebble. <a href="javascript: void();" class="js-platform-choice" data-sdk-platform="local">Not using CloudPebble?</a>
  </p>
  <p class="platform-specific" data-sdk-platform="local">
    <img src="/assets/images/sdk/sdk-box.svg">
    Showing instructions for the SDK. <a href="javascript: void();" class="js-platform-choice" data-sdk-platform="cloudpebble">Using CloudPebble?</a>
  </p>
</div>

    
    <p>PebbleKit JS allows a JavaScript component (run in a sandbox inside the official
Pebble mobile app) to be added to any watchapp or watchface in order to extend
the functionality of the app beyond what can be accomplished on the watch
itself.</p><p>Extra features available to an app using PebbleKit JS include:</p>
<ul>
<li><p>Access to extended storage with <a href="#using-localstorage" title="" class=""><code>localStorage</code></a>.</p></li>
<li><p>Internet access using <a href="#using-xmlhttprequest" title="" class=""><code>XMLHttpRequest</code></a>.</p></li>
<li><p>Location data using <a href="#using-geolocation" title="" class=""><code>geolocation</code></a>.</p></li>
<li><p>The ability to show a configuration page to allow users to customize how the
app behaves. This is discussed in detail in
<a href="/guides/user-interfaces/app-configuration/"><em>App Configuration</em></a>.</p></li>
</ul>
<h2 id="setting-up" class="anchor">Setting Up</h2><p class="platform-specific" data-sdk-platform="local">PebbleKit JS can be set up by creating the <code>index.js</code> file in the project&#39;s
<code>src/pkjs/</code> directory. Code in this file will be executed when the associated
watchapp is launched, and will stop once that app exits.</p><p class="platform-specific" data-sdk-platform="cloudpebble">PebbleKit JS can be set up by clicking &#39;Add New&#39; in the Source Files
section of the sidebar. Choose the &#39;JavaScript file&#39; type and choose a file name
before clicking &#39;Create&#39;. Code in this file will be executed when the associated
watchapp is launched, and will stop once that app exits.</p><p>The basic JS code required to begin using PebbleKit JS is shown below. An event
listener is created to listen for the <code>ready</code> event - fired when the watchapp
has been launched and the JS environment is ready to receive messages. This
callback must return within a short space of time (a few seconds) or else it
will timeout and be killed by the phone.</p><div class="highlight"><pre><span class="nx">Pebble</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">'ready'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// PebbleKit JS is ready!</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'PebbleKit JS ready!'</span><span class="p">);</span>
<span class="p">});</span>
</pre></div>
<div class="alert alert--fg-white alert--bg-dark-red">
<p><strong>Important</strong></p><p>A watchapp or watchface <strong>must</strong> wait for the <code>ready</code> event before attempting to
send messages to the connected phone. See 
<a href="/guides/communication/advanced-communication#waiting-for-pebblekit-js" title="" class=""><em>Advanced Communication</em></a> 
to learn how to do this.</p>
</div>
<h2 id="defining-keys" class="anchor">Defining Keys</h2><p class="platform-specific" data-sdk-platform="local">Before any messages can be sent or received, the keys to be used to store the
data items in the dictionary must be declared. The watchapp side uses
exclusively integer keys, whereas the JavaScript side may use the same integers
or named string keys declared in <code>package.json</code>. Any string key not declared
beforehand will not be transmitted to/from Pebble.</p><p class="platform-specific" data-sdk-platform="cloudpebble">Before any messages can be sent or received, the keys to be used to store
the data items in the dictionary must be declared. The watchapp side uses
exclusively integer keys, whereas the JavaScript side may use the same integers
or named string keys declared in the &#39;PebbleKit JS Message Keys&#39; section of
&#39;Settings&#39;. Any string key not declared beforehand will not be transmitted
to/from Pebble.</p>
<blockquote>
<p>Note: This requirement is true of PebbleKit JS <strong>only</strong>, and not PebbleKit
Android or iOS.</p></blockquote>
<p class="platform-specific" data-sdk-platform="local">Keys are declared in the project&#39;s <code>package.json</code> file in the <code>messageKeys</code>
object, which is inside the <code>pebble</code> object. Example keys are shown as equivalents
to the ones used in the hypothetical weather app example in
<a href="/guides/communication/sending-and-receiving-data/#choosing-key-values"><em>Sending and Receiving Data</em></a>.</p>
<div class="platform-specific" data-sdk-platform="local">
<div class="highlight "><pre><span class="s2">&quot;messageKeys&quot;</span><span class="o">:</span><span class="w"> </span><span class="p">[</span>
<span class="w">  </span><span class="s2">&quot;Temperature&quot;</span><span class="p">,</span>
<span class="w">  </span><span class="s2">&quot;WindSpeed&quot;</span><span class="p">,</span>
<span class="w">  </span><span class="s2">&quot;WindDirection&quot;</span><span class="p">,</span>
<span class="w">  </span><span class="s2">&quot;RequestData&quot;</span><span class="p">,</span>
<span class="w">  </span><span class="s2">&quot;LocationName&quot;</span>
<span class="p">]</span>
</pre></div>
</div>
<p class="platform-specific" data-sdk-platform="cloudpebble">Keys are declared individually in the &#39;PebbleKit JS Message Keys&#39; section
of the &#39;Settings&#39; page. Enter the &#39;Key Name&#39; of each key that will be used by
the app.</p><p>The names chosen here will be injected into your C code prefixed with <code>MESSAGE_KEY_</code>,
like <code>MESSAGE_KEY_Temperature</code>. As such, they must be legal C identifiers.</p><p>If you want to emulate an array by attaching multiple &quot;keys&quot; to a name, you can
specify the size of the array by adding it in square brackets: for instance,
<code>&quot;LapTimes[10]</code>&quot; would create a key called <code>LapTimes</code> and leave nine empty keys
after it which can be accessed by arithmetic, e.g. <code>MESSAGE_KEY_LapTimes + 3</code>.</p><h2 id="sending-messages-from-js" class="anchor">Sending Messages from JS</h2><p>Messages are sent to the C watchapp or watchface using
<code>Pebble.sendAppMessage()</code>, which accepts a standard JavaScript object containing
the keys and values to be transmitted. The keys used <strong>must</strong> be identical to
the ones declared earlier.</p><p>An example is shown below:</p><div class="highlight"><pre><span class="c1">// Assemble data object</span>
<span class="kd">var</span> <span class="nx">dict</span> <span class="o">=</span> <span class="p">{</span>
  <span class="s1">'Temperature'</span><span class="o">:</span> <span class="mi">29</span><span class="p">,</span>
  <span class="s1">'LocationName'</span><span class="o">:</span> <span class="s1">'London, UK'</span>
<span class="p">};</span>

<span class="c1">// Send the object</span>
<span class="nx">Pebble</span><span class="p">.</span><span class="nx">sendAppMessage</span><span class="p">(</span><span class="nx">dict</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'Message sent successfully: '</span> <span class="o">+</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">dict</span><span class="p">));</span>
<span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'Message failed: '</span> <span class="o">+</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">e</span><span class="p">));</span>
<span class="p">});</span>
</pre></div><p>It is also possible to read the numeric values of the keys by <code>require</code>ing
<code>message_keys</code>, which is necessary to use the array feature. For instance:</p><div class="highlight"><pre><span class="c1">// Require the keys' numeric values.</span>
<span class="kd">var</span> <span class="nx">keys</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'message_keys'</span><span class="p">);</span>

<span class="c1">// Build a dictionary.</span>
<span class="kd">var</span> <span class="nx">dict</span> <span class="o">=</span> <span class="p">{}</span>
<span class="nx">dict</span><span class="p">[</span><span class="nx">keys</span><span class="p">.</span><span class="nx">LapTimes</span><span class="p">]</span> <span class="o">=</span> <span class="mi">42</span>
<span class="nx">dict</span><span class="p">[</span><span class="nx">keys</span><span class="p">.</span><span class="nx">LapTimes</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">51</span>

<span class="c1">// Send the object</span>
<span class="nx">Pebble</span><span class="p">.</span><span class="nx">sendAppMessage</span><span class="p">(</span><span class="nx">dict</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'Message sent successfully: '</span> <span class="o">+</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">dict</span><span class="p">));</span>
<span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'Message failed: '</span> <span class="o">+</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">e</span><span class="p">));</span>
<span class="p">});</span>
</pre></div><h3 id="type-conversion" class="anchor">Type Conversion</h3><p>Depending on the type of the item in the object to be sent, the C app will be
able to read the value (from the
<a href="/guides/communication/sending-and-receiving-data#data-types" title="" class=""><code>Tuple.value</code> union</a>)
according to the table below:</p>
<table><thead>
<tr>
<th>JS Type</th>
<th>Union member</th>
</tr>
</thead><tbody>
<tr>
<td>String</td>
<td>cstring</td>
</tr>
<tr>
<td>Number</td>
<td>int32</td>
</tr>
<tr>
<td>Array</td>
<td>data</td>
</tr>
<tr>
<td>Boolean</td>
<td>int16</td>
</tr>
</tbody></table>
<h2 id="receiving-messages-in-js" class="anchor">Receiving Messages in JS</h2><p>When a message is received from the C watchapp or watchface, the <code>appmessage</code>
event is fired in the PebbleKit JS app. To receive these messages, register the
appropriate event listener:</p><div class="highlight"><pre><span class="c1">// Get AppMessage events</span>
<span class="nx">Pebble</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">'appmessage'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// Get the dictionary from the message</span>
  <span class="kd">var</span> <span class="nx">dict</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">payload</span><span class="p">;</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'Got message: '</span> <span class="o">+</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">dict</span><span class="p">));</span>
<span class="p">});</span>
</pre></div><p>Data can be read from the dictionary by reading the value if it is present. A
suggested best practice involves first checking for the presence of each key
within the callback using an <code>if()</code> statement.</p><div class="highlight"><pre><span class="k">if</span><span class="p">(</span><span class="nx">dict</span><span class="p">[</span><span class="s1">'RequestData'</span><span class="p">])</span> <span class="p">{</span>
  <span class="c1">// The RequestData key is present, read the value</span>
  <span class="kd">var</span> <span class="nx">value</span> <span class="o">=</span> <span class="nx">dict</span><span class="p">[</span><span class="s1">'RequestData'</span><span class="p">];</span>
<span class="p">}</span>
</pre></div><h2 id="using-localstorage" class="anchor">Using LocalStorage</h2><p>In addition to the storage available on the watch itself through the <a href="/docs/c/Foundation/Storage/" title="Storage" class="link--docs"><code>Storage</code></a>
API, apps can take advantage of the larger storage on the connected phone
through the use of the HTML 5 <a href="http://www.w3.org/TR/webstorage/" title="" class=""><code>localStorage</code></a>
API. Data stored here will persist across app launches, and so can be used to
persist latest data, app settings, and other data.</p><p>PebbleKit JS <code>localStorage</code> is:</p>
<ul>
<li><p>Associated with the application UUID and cannot be shared between apps.</p></li>
<li><p>Persisted when the user uninstalls and then reinstalls an app.</p></li>
<li><p>Persisted when the user upgrades an app.</p></li>
</ul>
<p>To store a value:</p><div class="highlight"><pre><span class="kd">var</span> <span class="nx">color</span> <span class="o">=</span> <span class="s1">'#FF0066'</span><span class="p">;</span>

<span class="c1">// Store some data</span>
<span class="nx">localStorage</span><span class="p">.</span><span class="nx">setItem</span><span class="p">(</span><span class="s1">'backgroundColor'</span><span class="p">,</span> <span class="nx">color</span><span class="p">);</span>
</pre></div><p>To read the data back:</p><div class="highlight"><pre><span class="kd">var</span> <span class="nx">color</span> <span class="o">=</span> <span class="nx">localStorage</span><span class="p">.</span><span class="nx">getItem</span><span class="p">(</span><span class="s1">'backgroundColor'</span><span class="p">);</span>
</pre></div>
<blockquote>
<p>Note: Keys used with <code>localStorage</code> should be Strings.</p></blockquote>
<h2 id="using-xmlhttprequest" class="anchor">Using XMLHttpRequest</h2><p>A PebbleKit JS-equipped app can access the internet and communicate with web
services or download data using the standard
<a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest" title="" class=""><code>XMLHttpRequest</code></a>
object.</p><p>To communicate with the web, create an <code>XMLHttpRequest</code> object and send it,
specifying the HTTP method and URL to be used, as well as a callback for when it
is successfully completed:</p><div class="highlight"><pre><span class="kd">var</span> <span class="nx">method</span> <span class="o">=</span> <span class="s1">'GET'</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="s1">'http://example.com'</span><span class="p">;</span>

<span class="c1">// Create the request</span>
<span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">();</span>

<span class="c1">// Specify the callback for when the request is completed</span>
<span class="nx">request</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// The request was successfully completed!</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'Got response: '</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">responseText</span><span class="p">);</span>
<span class="p">};</span>

<span class="c1">// Send the request</span>
<span class="nx">request</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="nx">method</span><span class="p">,</span> <span class="nx">url</span><span class="p">);</span>
<span class="nx">request</span><span class="p">.</span><span class="nx">send</span><span class="p">();</span>
</pre></div><p>If the response is expected to be in the JSON format, data items can be easily
read after the <code>responseText</code> is converted into a JSON object:</p><div class="highlight"><pre><span class="nx">request</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="c1">// Transform in to JSON</span>
    <span class="kd">var</span> <span class="nx">json</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">responseText</span><span class="p">);</span>

    <span class="c1">// Read data</span>
    <span class="kd">var</span> <span class="nx">temperature</span> <span class="o">=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">main</span><span class="p">.</span><span class="nx">temp</span><span class="p">;</span>
  <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'Error parsing JSON response!'</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">};</span>
</pre></div><h2 id="using-geolocation" class="anchor">Using Geolocation</h2><p>PebbleKit JS provides access to the location services provided by the phone
through the
<a href="http://dev.w3.org/geo/api/spec-source.html" title="" class=""><code>navigator.geolocation</code></a> object.</p><p class="platform-specific" data-sdk-platform="cloudpebble">Declare that the app will be using the <code>geolocation</code> API by checking the
&#39;Uses Location&#39; checkbox in the &#39;Settings&#39; screen.</p><p class="platform-specific" data-sdk-platform="local">Declare that the app will be using the <code>geolocation</code> API by adding the
string <code>location</code> in the <code>capabilities</code> array in <code>package.json</code>:</p>
<div class="platform-specific" data-sdk-platform="local">
<div class="highlight "><pre><span class="s2">&quot;capabilities&quot;</span><span class="o">:</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="s2">&quot;location&quot;</span><span class="w"> </span><span class="p">]</span>
</pre></div>
</div>
<p>Below is an example showing how to get a single position value from the
<code>geolocation</code> API using the 
<a href="https://developer.mozilla.org/en-US/docs/Web/API/Geolocation/getCurrentPosition" title="" class=""><code>getCurrentPosition()</code></a> 
method:</p><div class="highlight"><pre><span class="kd">function</span> <span class="nx">success</span><span class="p">(</span><span class="nx">pos</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'lat= '</span> <span class="o">+</span> <span class="nx">pos</span><span class="p">.</span><span class="nx">coords</span><span class="p">.</span><span class="nx">latitude</span> <span class="o">+</span> <span class="s1">' lon= '</span> <span class="o">+</span> <span class="nx">pos</span><span class="p">.</span><span class="nx">coords</span><span class="p">.</span><span class="nx">longitude</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'location error ('</span> <span class="o">+</span> <span class="nx">err</span><span class="p">.</span><span class="nx">code</span> <span class="o">+</span> <span class="s1">'): '</span> <span class="o">+</span> <span class="nx">err</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
<span class="p">}</span>

<span class="cm">/* ... */</span>

<span class="c1">// Choose options about the data returned</span>
<span class="kd">var</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">enableHighAccuracy</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="nx">maximumAge</span><span class="o">:</span> <span class="mi">10000</span><span class="p">,</span>
  <span class="nx">timeout</span><span class="o">:</span> <span class="mi">10000</span>
<span class="p">};</span>

<span class="c1">// Request current position</span>
<span class="nx">navigator</span><span class="p">.</span><span class="nx">geolocation</span><span class="p">.</span><span class="nx">getCurrentPosition</span><span class="p">(</span><span class="nx">success</span><span class="p">,</span> <span class="nx">error</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span>
</pre></div><p>Location permission is given by the user to the Pebble application for all
Pebble apps. The app should gracefully handle the <code>PERMISSION DENIED</code> error and
fallback to a default value or manual configuration when the user has denied
location access to Pebble apps.</p><div class="highlight"><pre><span class="kd">function</span> <span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nx">code</span> <span class="o">==</span> <span class="nx">err</span><span class="p">.</span><span class="nx">PERMISSION_DENIED</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'Location access was denied by the user.'</span><span class="p">);</span>  
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'location error ('</span> <span class="o">+</span> <span class="nx">err</span><span class="p">.</span><span class="nx">code</span> <span class="o">+</span> <span class="s1">'): '</span> <span class="o">+</span> <span class="nx">err</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</pre></div><p>The <code>geolocation</code> API also provides a mechanism to receive callbacks when the
user&#39;s position changes to avoid the need to manually poll at regular intervals.
This is achieved by using 
<a href="https://developer.mozilla.org/en-US/docs/Web/API/Geolocation/watchPosition" title="" class=""><code>watchPosition()</code></a> 
in a manner similar to the example below:</p><div class="highlight"><pre><span class="c1">// An ID to store to later clear the watch</span>
<span class="kd">var</span> <span class="nx">watchId</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">success</span><span class="p">(</span><span class="nx">pos</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'Location changed!'</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'lat= '</span> <span class="o">+</span> <span class="nx">pos</span><span class="p">.</span><span class="nx">coords</span><span class="p">.</span><span class="nx">latitude</span> <span class="o">+</span> <span class="s1">' lon= '</span> <span class="o">+</span> <span class="nx">pos</span><span class="p">.</span><span class="nx">coords</span><span class="p">.</span><span class="nx">longitude</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'location error ('</span> <span class="o">+</span> <span class="nx">err</span><span class="p">.</span><span class="nx">code</span> <span class="o">+</span> <span class="s1">'): '</span> <span class="o">+</span> <span class="nx">err</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
<span class="p">}</span>

<span class="cm">/* ... */</span>

<span class="kd">var</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">enableHighAccuracy</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="nx">maximumAge</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
  <span class="nx">timeout</span><span class="o">:</span> <span class="mi">5000</span>
<span class="p">};</span>

<span class="c1">// Get location updates</span>
<span class="nx">watchId</span> <span class="o">=</span> <span class="nx">navigator</span><span class="p">.</span><span class="nx">geolocation</span><span class="p">.</span><span class="nx">watchPosition</span><span class="p">(</span><span class="nx">success</span><span class="p">,</span> <span class="nx">error</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span>
</pre></div><p>To cancel the update callbacks, use the <code>watchId</code> variable received when the
watch was registered with the 
<a href="https://developer.mozilla.org/en-US/docs/Web/API/Geolocation/clearWatch" title="" class=""><code>clearWatch()</code></a> 
method:</p><div class="highlight"><pre><span class="c1">// Clear the watch and stop receiving updates</span>
<span class="nx">navigator</span><span class="p">.</span><span class="nx">geolocation</span><span class="p">.</span><span class="nx">clearWatch</span><span class="p">(</span><span class="nx">watchId</span><span class="p">);</span>
</pre></div><h2 id="account-token" class="anchor">Account Token</h2><p>PebbleKit JS provides a unique account token that is associated with the Pebble
account of the current user, accessible using <code>Pebble.getAccountToken()</code>:</p><div class="highlight"><pre><span class="c1">// Get the account token</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'Pebble Account Token: '</span> <span class="o">+</span> <span class="nx">Pebble</span><span class="p">.</span><span class="nx">getAccountToken</span><span class="p">());</span>
</pre></div><p>The token is a string with the following properties:</p>
<ul>
<li><p>From the developer&#39;s perspective, the account token of a user is identical
across platforms and across all the developer&#39;s watchapps.</p></li>
<li><p>If the user is not logged in, the token will be an empty string (&#39;&#39;).</p></li>
</ul>
<h2 id="watch-token" class="anchor">Watch Token</h2><p>PebbleKit JS also provides a unique token that can be used to identify a Pebble
device. It works in a similar way to <code>Pebble.getAccountToken()</code>:</p><div class="highlight"><pre><span class="c1">// Get the watch token</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'Pebble Watch Token: '</span> <span class="o">+</span> <span class="nx">Pebble</span><span class="p">.</span><span class="nx">getWatchToken</span><span class="p">());</span>
</pre></div><p>The token is a string that is unique to the app and cannot be used to track
Pebble devices across applications.</p>
<div class="alert alert--fg-white alert--bg-dark-red">
<p><strong>Important</strong></p><p>The watch token is dependent on the watch&#39;s serial number, and therefore
<strong>should not</strong> be used to store sensitive user information in case the watch
changes ownership. If the app wishes to track a specific user <em>and</em> watch, use a
combination of the watch and account token.</p>
</div>
<h2 id="showing-a-notification" class="anchor">Showing a Notification</h2><p>A PebbleKit JS app can send a notification to the watch. This uses the standard
system notification layout with customizable <code>title</code> and <code>body</code> fields:</p><div class="highlight"><pre><span class="kd">var</span> <span class="nx">title</span> <span class="o">=</span> <span class="s1">'Update Available'</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">body</span> <span class="o">=</span> <span class="s1">'Version 1.5 of this app is now available from the appstore!'</span><span class="p">;</span>

<span class="c1">// Show the notification</span>
<span class="nx">Pebble</span><span class="p">.</span><span class="nx">showSimpleNotificationOnPebble</span><span class="p">(</span><span class="nx">title</span><span class="p">,</span> <span class="nx">body</span><span class="p">);</span>
</pre></div>
<blockquote>
<p>Note: PebbleKit Android/iOS applications cannot directly invoke a
notification, and should instead leverage the respective platform notification
APIs. These will be passed on to Pebble unless the user has turned them off in
the mobile app.</p></blockquote>
<h2 id="getting-watch-information" class="anchor">Getting Watch Information</h2><p>Use <code>Pebble.getActiveWatchInfo()</code> to return an object of data about the
connected Pebble.</p>
<div class="alert alert--fg-white alert--bg-purple">
<p>This API is currently only available for SDK 3.0 and above. Do not assume that
this function exists, so test that it is available before attempting to use it
using the code shown below.</p>
</div>
<div class="highlight"><pre><span class="kd">var</span> <span class="nx">watch</span> <span class="o">=</span> <span class="nx">Pebble</span><span class="p">.</span><span class="nx">getActiveWatchInfo</span> <span class="o">?</span> <span class="nx">Pebble</span><span class="p">.</span><span class="nx">getActiveWatchInfo</span><span class="p">()</span> <span class="o">:</span> <span class="kc">null</span><span class="p">;</span>

<span class="k">if</span><span class="p">(</span><span class="nx">watch</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// Information is available!</span>

<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
  <span class="c1">// Not available, handle gracefully</span>

<span class="p">}</span>
</pre></div>
<blockquote>
<p>Note: If there is no active watch available, <code>null</code> will be returned.</p></blockquote>
<p>The table below details the fields of the returned object and the information
available.</p>
<table><thead>
<tr>
<th>Field</th>
<th>Type</th>
<th>Description</th>
<th>Values</th>
</tr>
</thead><tbody>
<tr>
<td><code>platform</code></td>
<td>String</td>
<td>Hardware platform name.</td>
<td><code>aplite</code>, <code>basalt</code>, <code>chalk</code>.</td>
</tr>
<tr>
<td><code>model</code></td>
<td>String</td>
<td>Watch model name including color.</td>
<td><code>pebble_black</code>, <code>pebble_grey</code>, <code>pebble_white</code>, <code>pebble_red</code>, <code>pebble_orange</code>, <code>pebble_blue</code>, <code>pebble_green</code>, <code>pebble_pink</code>, <code>pebble_steel_silver</code>, <code>pebble_steel_black</code>, <code>pebble_time_red</code>, <code>pebble_time_white</code>, <code>pebble_time_black</code>, <code>pebble_time_steel_black</code>, <code>pebble_time_steel_silver</code>, <code>pebble_time_steel_gold</code>, <code>pebble_time_round_silver_14mm</code>, <code>pebble_time_round_black_14mm</code>, <code>pebble_time_round_rose_gold_14mm</code>, <code>pebble_time_round_silver_20mm</code>, <code>pebble_time_round_black_20mm</code>, <code>qemu_platform_aplite</code>, <code>qemu_platform_basalt</code>, <code>qemu_platform_chalk</code>.</td>
</tr>
<tr>
<td><code>language</code></td>
<td>String</td>
<td>Language currently selected on the watch.</td>
<td>E.g.: <code>en_GB</code>. See the <a href="/guides/tools-and-resources/internationalization/#locales-supported-by-pebble"><em>Internationalization</em></a> for more information.</td>
</tr>
<tr>
<td><code>firmware</code></td>
<td>Object</td>
<td>The firmware version running on the watch.</td>
<td>See below for sub-fields.</td>
</tr>
<tr>
<td><code>firmware.major</code></td>
<td>Number</td>
<td>Major firmware version.</td>
<td>E.g.: <code>2</code></td>
</tr>
<tr>
<td><code>firmware.minor</code></td>
<td>Number</td>
<td>Minor firmware version.</td>
<td>E.g.: <code>8</code></td>
</tr>
<tr>
<td><code>firmware.patch</code></td>
<td>Number</td>
<td>Patch firmware version.</td>
<td>E.g.: <code>1</code></td>
</tr>
<tr>
<td><code>firmware.suffix</code></td>
<td>String</td>
<td>Any additional firmware versioning.</td>
<td>E.g.: <code>beta3</code></td>
</tr>
</tbody></table>

    </div>
    
    <a id="comments" class="anchor"></a>
    <div id="disqus_thread" aria-live="polite" data-post-url="https://developer.getpebble.com/guides/communication/using-pebblekit-js/">
      You need JavaScript enabled to read and post comments.
    </div>
    
    
  </div>
  
    <div class="col-m-4 hidden-s hidden-xs hidden-m">
      <div class="gray-box gray-box--fixed gray-box--scrollspy">
        
  <h3>Overview</h3>
  <ul class="toc">
    
      <li class="toc__item toc__item--level1"><a href="#setting-up">Setting Up</a></li>
    
      <li class="toc__item toc__item--level1"><a href="#defining-keys">Defining Keys</a></li>
    
      <li class="toc__item toc__item--level1"><a href="#sending-messages-from-js">Sending Messages from JS</a></li>
    
      <li class="toc__item toc__item--level2"><a href="#type-conversion">Type Conversion</a></li>
    
      <li class="toc__item toc__item--level1"><a href="#receiving-messages-in-js">Receiving Messages in JS</a></li>
    
      <li class="toc__item toc__item--level1"><a href="#using-localstorage">Using LocalStorage</a></li>
    
      <li class="toc__item toc__item--level1"><a href="#using-xmlhttprequest">Using XMLHttpRequest</a></li>
    
      <li class="toc__item toc__item--level1"><a href="#using-geolocation">Using Geolocation</a></li>
    
      <li class="toc__item toc__item--level1"><a href="#account-token">Account Token</a></li>
    
      <li class="toc__item toc__item--level1"><a href="#watch-token">Watch Token</a></li>
    
      <li class="toc__item toc__item--level1"><a href="#showing-a-notification">Showing a Notification</a></li>
    
      <li class="toc__item toc__item--level1"><a href="#getting-watch-information">Getting Watch Information</a></li>
    
  </ul>

        
        
      </div>
    </div>
  
</div>

  </div>
</div>

    
  </div>
  <script type="text/javascript">
    var searchPrimary = '';
  </script>
  
  <script type="text/javascript" src="/assets/js/libs-ce98da7b5eecc97f976a3cad8e665a31.js"></script>
  
  <script type="text/javascript" src="/assets/js/templates.js"></script>
  <script type="text/javascript" src="/assets/js/app.js"></script>
  <script type="text/javascript" src="/assets/js/search.js"></script>
  <script type="text/javascript" src="/assets/js/quicksearch.js"></script>
  <script type="text/javascript" src="/assets/js/disqus.js"></script>
  
</body>
</html>
